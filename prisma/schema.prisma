// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  OWNER
  OPS
  EU_TAILOR
  KE_TAILOR
  QC
}

enum WorkOrderStage {
  intake_pending
  measurement_pending
  measurement_submitted
  measurement_approved
  in_production
  in_qc
  ready_to_ship
  in_transit_to_eu
  at_eu_tailor
  eu_adjustment
  ready_for_pickup
  delivered
  completed
  blocked
}

enum TaskType {
  cutting
  sewing_coat
  sewing_trouser
  finishing
  rework
}

enum TaskStatus {
  todo
  in_progress
  done
  blocked
  cancelled
}

enum MeasurementSource {
  formbricks
  native
}

enum ShipmentStatus {
  pending
  label_created
  picked_up
  in_transit
  out_for_delivery
  delivered
  delivery_failed
  returned
  on_hold
}

enum NoteVisibility {
  internal
  customer
  tailor
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(OPS)
  phone         String?
  verified      Boolean   @default(false)
  region        String?   // EU or KE
  skills        Json?     // Array of skills
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?

  accounts      Account[]
  sessions      Session[]
  assignedEuOrders    WorkOrder[]   @relation("EuTailorAssignment")
  assignedTasks       Task[]        @relation("TailorAssignment")
  qcResults           QCResult[]    @relation("QCInspector")
  notes               Note[]
  auditLogs           AuditLog[]

  @@index([email])
  @@index([role])
  @@index([region])
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Customer {
  id        String      @id @default(cuid())
  name      String
  email     String
  phone     String?
  country   String?
  city      String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  deletedAt DateTime?

  workOrders WorkOrder[]

  @@index([email])
  @@index([phone])
  @@map("customers")
}

model WorkOrder {
  id                    String           @id @default(cuid())
  externalOrderId       String?          @unique
  customerId            String
  currentStage          WorkOrderStage   @default(intake_pending)
  priority              Int              @default(0)
  dueAt                 DateTime?
  assignedEuTailorId    String?
  assignedKeTailorIds   Json?            // Array of tailor IDs
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt
  deletedAt             DateTime?

  customer              Customer         @relation(fields: [customerId], references: [id])
  assignedEuTailor      User?            @relation("EuTailorAssignment", fields: [assignedEuTailorId], references: [id])
  measurements          Measurement[]
  tasks                 Task[]
  qcResults             QCResult[]
  shipments             Shipment[]
  notes                 Note[]

  @@index([customerId])
  @@index([currentStage])
  @@index([assignedEuTailorId])
  @@index([dueAt])
  @@index([externalOrderId])
  @@map("work_orders")
}

model Measurement {
  id          String              @id @default(cuid())
  workOrderId String
  source      MeasurementSource
  payload     Json                // Full measurement data
  photos      Json?               // Array of photo URLs
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  deletedAt   DateTime?

  workOrder   WorkOrder           @relation(fields: [workOrderId], references: [id])

  @@index([workOrderId])
  @@map("measurements")
}

model Task {
  id                    String      @id @default(cuid())
  workOrderId           String?
  type                  TaskType
  title                 String
  description           String?     @db.Text
  status                TaskStatus  @default(todo)
  assigneeId            String?
  checklist             Json?       // Array of checklist items
  dueAt                 DateTime?
  reminderSent          Boolean     @default(false)
  overdueReminderSent   Boolean     @default(false)
  startedAt             DateTime?
  finishedAt            DateTime?
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt
  deletedAt             DateTime?

  workOrder             WorkOrder?  @relation(fields: [workOrderId], references: [id])
  assignee              User?       @relation("TailorAssignment", fields: [assigneeId], references: [id])

  @@index([workOrderId])
  @@index([assigneeId])
  @@index([status])
  @@index([dueAt])
  @@map("tasks")
}

model QCForm {
  id        String     @id @default(cuid())
  name      String
  steps     Json       // Array of step definitions
  active    Boolean    @default(true)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  deletedAt DateTime?

  qcResults QCResult[]

  @@map("qc_forms")
}

model QCResult {
  id          String    @id @default(cuid())
  workOrderId String
  qcFormId    String
  inspectorId String
  results     Json      // Step-by-step results
  pass        Boolean
  photos      Json?     // Array of photo URLs
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  workOrder   WorkOrder @relation(fields: [workOrderId], references: [id])
  qcForm      QCForm    @relation(fields: [qcFormId], references: [id])
  inspector   User      @relation("QCInspector", fields: [inspectorId], references: [id])

  @@index([workOrderId])
  @@index([qcFormId])
  @@index([inspectorId])
  @@map("qc_results")
}

model Shipment {
  id              String          @id @default(cuid())
  workOrderId     String
  courier         String
  waybill         String?         @unique
  labelUrl        String?
  cost            Float?
  status          ShipmentStatus  @default(pending)
  trackingHistory Json?           // Array of tracking events
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  deletedAt       DateTime?

  workOrder       WorkOrder       @relation(fields: [workOrderId], references: [id])

  @@index([workOrderId])
  @@index([waybill])
  @@map("shipments")
}

model Note {
  id          String         @id @default(cuid())
  workOrderId String
  authorId    String
  body        String         @db.Text
  visibility  NoteVisibility @default(internal)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  deletedAt   DateTime?

  workOrder   WorkOrder      @relation(fields: [workOrderId], references: [id])
  author      User           @relation(fields: [authorId], references: [id])

  @@index([workOrderId])
  @@index([authorId])
  @@map("notes")
}

model AuditLog {
  id        String   @id @default(cuid())
  actorId   String?
  action    String
  target    String
  diff      Json?    // Changes made
  createdAt DateTime @default(now()) @map("at")

  actor     User?    @relation(fields: [actorId], references: [id])

  @@index([actorId])
  @@index([action])
  @@index([target])
  @@index([createdAt])
  @@map("audit_logs")
}

model Setting {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String   @db.Text
  encrypted Boolean  @default(false)
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  @@index([key])
  @@map("settings")
}
